{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Chef Compliance Lab by Levon Becker v20160401-1115",
  "Parameters": {
    "Ec2KeyPair": {
      "Description": "Select Keypair to Assign to EC2 Instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "BastionAccessSource": {
      "Description": "Source that has SSH access to the bastion host. (i.e. 50.32.108.38/32)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "Owner": {
      "Description": "Enter Team or Individual Name Responsible for the Stack.",
      "Type": "String",
      "Default": "Levon Becker"
    },
    "Project": {
      "Description": "Enter Project Name.",
      "Type": "String",
      "Default": "Continuous Security"
    },
    "DeleteAfter": {
      "Description": "Enter Date It's Ok to Delete the Stack.",
      "Type": "String",
      "Default": "05/01/2016",
      "AllowedPattern": "^(1[0-2]|0[1-9])/(3[01]|[12][0-9]|0[1-9])/[0-9]{4}$"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-west-2": {
        "VPC": "10.31.0.0/20",
        "PublicAZ1": "10.31.0.0/24",
        "PublicAZ2": "10.31.1.0/24",
        "PublicAZ3": "10.31.2.0/24",
        "PrivateAZ1": "10.31.3.0/24",
        "PrivateAZ2": "10.31.4.0/24",
        "PrivateAZ3": "10.31.5.0/24",
        "ChefComplianceVersion": "0.15.13-1",
        "AMIChefCompliance": "ami-9ebb55fe",
        "AMIRHEL7": "ami-775e4f16",
        "AMIUbuntu14": "ami-9abea4fb",
        "AMIWin2012": "ami-1719f677",
        "StopTime": "* 9 * * *",
        "StartTime": "* 15 * * *",
        "InstanceTypeChefCompliance": "t2.medium",
        "InstanceTypeBastion": "t2.micro",
        "InstanceTypeRHEL7": "t2.micro",
        "InstanceTypeUbuntu14": "t2.micro",
        "InstanceTypeWin2012": "t2.medium"
      },
      "us-east-1": {
        "VPC": "10.32.0.0/20",
        "PublicAZ1": "10.32.0.0/24",
        "PublicAZ2": "10.32.1.0/24",
        "PublicAZ3": "10.32.2.0/24",
        "PrivateAZ1": "10.32.3.0/24",
        "PrivateAZ2": "10.32.4.0/24",
        "PrivateAZ3": "10.32.5.0/24",
        "ChefComplianceVersion": "0.15.13-1",
        "AMIChefCompliance": "ami-a83b3fc2",
        "AMIRHEL7": "ami-2051294a",
        "AMIUbuntu14": "ami-fce3c696",
        "AMIWin2012": "ami-3d787d57",
        "StopTime": "* 9 * * *",
        "StartTime": "* 15 * * *",
        "InstanceTypeChefCompliance": "t2.medium",
        "InstanceTypeBastion": "t2.micro",
        "InstanceTypeRHEL7": "t2.micro",
        "InstanceTypeUbuntu14": "t2.micro",
        "InstanceTypeWin2012": "t2.medium"
      }
    },
    "bootstrap": {
      "rhel": {
        "warmebs": "dd if=/dev/xvda of=/dev/xvda conv=notrunc bs=1M",
        "installpackages": "yum install curl wget cloud-utils ca-certificate vim",
        "installbastionpackages": "yum install mysql openssl"
      },
      "ubuntu": {
        "warmebs": "dd if=/dev/xvda of=/dev/xvda conv=notrunc bs=1M",
        "installpackages": "apt-get update && apt-get install curl wget cloud-utils ca-certificate vim"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "CidrBlock": {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "VPC"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Ref": "AWS::StackName"}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "VPC",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"}, "a"]]},
        "CidrBlock": {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "PublicAZ1"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-public-az1"]]}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "VPC",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"}, "b"]]},
        "CidrBlock": {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "PublicAZ2"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-public-az2"]]}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "PublicSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "VPC",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"}, "c"]]},
        "CidrBlock": {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "PublicAZ3"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-public-az3"]]}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Ref": "AWS::StackName"}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DependsOn": [
        "InternetGateway",
        "VPC"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": "VPC",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-public"]]}
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": [
        "PublicRouteTable",
        "InternetGateway"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "PublicSubnet1",
        "PublicRouteTable"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "PublicSubnet2",
        "PublicRouteTable",
        "GatewayToInternet"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnetRouteTableAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "PublicSubnet3",
        "PublicRouteTable",
        "GatewayToInternet"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet3"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "VPC",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"}, "a"]]},
        "CidrBlock": {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "PrivateAZ1"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-private-az1"]]}
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "VPC",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"}, "b"]]},
        "CidrBlock": {
            "Fn::FindInMap": [
              "RegionMap",
              {"Ref": "AWS::Region"},
              "PrivateAZ2"
            ]
          },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-private-az2"]]}
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "PrivateSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "VPC",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"}, "c"]]},
        "CidrBlock": {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "PrivateAZ3"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-private-az3"]]}
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": "VPC",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-private"]]}
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "PrivateSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "PrivateSubnet1",
        "PrivateRouteTable"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "PrivateSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "PrivateSubnet2",
        "PrivateRouteTable"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "PrivateSubnetRouteTableAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "PrivateSubnet3",
        "PrivateRouteTable"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet3"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "S3VpcEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "DependsOn": [
        "VPC",
        "PrivateRouteTable",
        "PublicRouteTable"
      ],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "*",
              "Effect": "Allow",
              "Resource": "*",
              "Principal": "*"
            }
          ]
        },
        "RouteTableIds": [
          {"Ref": "PrivateRouteTable"},
          {"Ref": "PublicRouteTable"}
        ],
        "ServiceName": { "Fn::Join": [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".s3" ] ] },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "DependsOn": "VPC",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-public-acl"]]}
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "InboundPublicNetworkAclEntry100": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "PublicNetworkAcl",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "InboundPublicNetworkAclEntry105": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "PublicNetworkAcl",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "105",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "InboundPublicNetworkAclEntry110": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "PublicNetworkAcl",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "110",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "8080",
          "To": "8080"
        }
      }
    },
    "InboundPublicNetworkAclEntry115": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "PublicNetworkAcl",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "115",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "8443",
          "To": "8443"
        }
      }
    },
    "InboundPublicNetworkAclEntry120": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "PublicNetworkAcl",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "120",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "InboundPublicNetworkAclEntry125": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "PublicNetworkAcl",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "125",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "3389",
          "To": "3389"
        }
      }
    },
    "InboundPublicNetworkAclEntry130": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "PublicNetworkAcl",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "130",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "InboundPublicNetworkAclEntry135": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "PublicNetworkAcl",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "135",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "VPC"
          ]
        },
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "PublicNetworkAcl",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn": ["PublicSubnet1", "PublicNetworkAcl"],
      "Properties": {
        "SubnetId":
        {
          "Ref": "PublicSubnet1"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn": ["PublicSubnet2", "PublicNetworkAcl"],
      "Properties": {
        "SubnetId":
        {
          "Ref": "PublicSubnet2"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation3": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn": ["PublicSubnet3", "PublicNetworkAcl"],
      "Properties": {
        "SubnetId":
        {
          "Ref": "PublicSubnet3"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },
    "PrivateNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "DependsOn": "VPC",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-private-acl"]]}
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "InboundEphemeralPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "PrivateNetworkAcl",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "PrivateNetworkAcl",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociation1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn": [
        "PrivateSubnet1",
        "PrivateNetworkAcl"
      ],
      "Properties": {
        "SubnetId":
        {
          "Ref": "PrivateSubnet1"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociation2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn": [
        "PrivateSubnet2",
        "PrivateNetworkAcl"
      ],
      "Properties": {
        "SubnetId":
        {
          "Ref": "PrivateSubnet2"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociation3": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn": [
        "PrivateSubnet3",
        "PrivateNetworkAcl"
      ],
      "Properties": {
        "SubnetId":
        {
          "Ref": "PrivateSubnet3"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },
    "NatSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": "VPC",
      "Properties": {
        "GroupDescription": "NAT Internet Access",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-nat-private-to-internet"]]}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Fn::FindInMap": [
                "RegionMap",
                {"Ref": "AWS::Region"},
                "PrivateAZ1"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Fn::FindInMap": [
                "RegionMap",
                {"Ref": "AWS::Region"},
                "PrivateAZ1"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Fn::FindInMap": [
                "RegionMap",
                {"Ref": "AWS::Region"},
                "PrivateAZ2"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Fn::FindInMap": [
                "RegionMap",
                {"Ref": "AWS::Region"},
                "PrivateAZ2"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Fn::FindInMap": [
                "RegionMap",
                {"Ref": "AWS::Region"},
                "PrivateAZ3"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Fn::FindInMap": [
                "RegionMap",
                {"Ref": "AWS::Region"},
                "PrivateAZ3"
              ]
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": {
              "Fn::FindInMap": [
                "RegionMap",
                {"Ref": "AWS::Region"},
                "VPC"
              ]
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "InternalAccessSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": "VPC",
      "Properties": {
        "GroupDescription": "Instance to Instance Access in VPC",
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-instance-to-instance"]]}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "InternalAccessSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "DependsOn": "InternalAccessSecurityGroup",
      "Properties": {
        "GroupId": {
          "Ref": "InternalAccessSecurityGroup"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "InternalAccessSecurityGroup"
        }
      }
    },
    "NatGateway": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": ["NatEIP", "AllocationId"]},
        "SubnetId": { "Ref": "PublicSubnet1"}
      }
    },
    "NatEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NatRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "NatGateway" }
      }
    },
    "IamRole" : {
      "Type"  : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/"
      }
    },
    "IamPolicies" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-s3-cloudwatch-ec2"]]},
        "PolicyDocument" : {
          "Statement" : [ {
            "Effect" : "Allow",
            "Action" : [
              "s3:*",
              "ec2:Describe*",
              "elasticloadbalancing:Describe*",
              "autoscaling:Describe*",
              "cloudwatch:*",
              "logs:*",
              "sns:*"
            ],
            "Resource" : "*"
          }]
        },
        "Roles" : [ { "Ref" : "IamRole" } ]
      }
    },
    "IamInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ { "Ref" : "IamRole" } ]
      }
    },
    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": "VPC",
      "Properties": {
        "GroupDescription": "SSH Access to Bastion Instance",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-bastion"]]}
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {"Ref": "BastionAccessSource"}
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": {
              "Fn::FindInMap": [
                "RegionMap",
                {"Ref": "AWS::Region"},
                "VPC"
              ]
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "BastionInstance": {
      "Type" : "AWS::EC2::Instance",
      "DependsOn": [
        "VPC",
        "PublicSubnet1",
        "BastionSecurityGroup",
        "InternalAccessSecurityGroup",
        "IamInstanceProfile"
      ],
      "Properties" : {
        "IamInstanceProfile" : { "Ref": "IamInstanceProfile" },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "AMIRHEL7"
          ]
        },
        "InstanceInitiatedShutdownBehavior" : "stop",
        "InstanceType" : {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "InstanceTypeBastion"
          ]
        },
        "KeyName": {
          "Ref": "Ec2KeyPair"
        },
        "Monitoring" : "true",
        "SecurityGroupIds": [
          {"Ref": "BastionSecurityGroup"},
          {"Ref": "InternalAccessSecurityGroup"}
        ],
        "SubnetId" : { "Ref": "PublicSubnet1" },
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "",
              [
                "#!/bin/bash\n",
                {
                  "Fn::FindInMap": [
                    "bootstrap",
                    "rhel",
                    "warmebs"
                  ]
                },
                "\n",
                {
                  "Fn::FindInMap": [
                    "bootstrap",
                    "rhel",
                    "installpackages"
                  ]
                },
                "\n",
                {
                  "Fn::FindInMap": [
                    "bootstrap",
                    "rhel",
                    "installbastionpackages"
                  ]
                },
                "\n",
                "IPAddress=",
                {"Ref": "BastionEIP"},
                "\n"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-bastion"]]}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "BastionEIP" : {
      "Type" : "AWS::EC2::EIP"
    },
    "BastionEIPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "DependsOn": [
        "BastionInstance",
        "BastionEIP"
      ],
      "Properties" : {
        "InstanceId" : { "Ref" : "BastionInstance" },
        "EIP" : { "Ref" : "BastionEIP" }
      }
    },
    "InternetToChefComplianceServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": "VPC",
      "Properties": {
        "GroupDescription": "Internet to Chef Compliance Server Access",
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-internet-to-chefcompliance"]]}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8443",
            "ToPort": "8443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "EC2InstanceChefCompliance" : {
      "DependsOn": [
        "VPC",
        "PublicSubnet1",
        "InternalAccessSecurityGroup",
        "InternetToChefComplianceServerSecurityGroup",
        "IamInstanceProfile"
      ],
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "InstanceTypeChefCompliance"
          ]
        },
        "IamInstanceProfile": {"Ref": "IamInstanceProfile"},
        "ImageId" : {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "AMIChefCompliance"
          ]
        },
        "NetworkInterfaces": [{
          "GroupSet": [
            {"Ref": "InternetToChefComplianceServerSecurityGroup"},
            {"Ref": "InternalAccessSecurityGroup"}
          ],
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "DeleteOnTermination": "true",
          "SubnetId": {"Ref": "PublicSubnet1"}
        }],
        "KeyName": {
          "Ref": "Ec2KeyPair"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                {
                  "Fn::FindInMap": [
                    "bootstrap",
                    "rhel",
                    "warmebs"
                  ]
                },
                "\n",
                {
                  "Fn::FindInMap": [
                    "bootstrap",
                    "rhel",
                    "installpackages"
                  ]
                },
                "\n"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-web"]]}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          },
          {
            "Key": "ChefComplianceVersion",
            "Value": {
              "Fn::FindInMap": [
                "RegionMap",
                {"Ref": "AWS::Region"},
                "ChefComplianceVersion"
              ]
            }
          }
        ]
      }
    },
    "EC2InstanceRHEL7" : {
      "DependsOn": [
        "VPC",
        "PrivateSubnet1",
        "InternalAccessSecurityGroup",
        "NatSecurityGroup",
        "IamInstanceProfile"
      ],
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "InstanceTypeRHEL7"
          ]
        },
        "IamInstanceProfile": {"Ref": "IamInstanceProfile"},
        "ImageId" : {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "AMIRHEL7"
          ]
        },
        "NetworkInterfaces": [{
          "GroupSet": [
            {"Ref": "InternalAccessSecurityGroup"},
            {"Ref": "NatSecurityGroup"}
          ],
          "AssociatePublicIpAddress": "false",
          "DeviceIndex": "0",
          "DeleteOnTermination": "true",
          "SubnetId": {"Ref": "PrivateSubnet1"}
        }],
        "KeyName": {
          "Ref": "Ec2KeyPair"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                {
                  "Fn::FindInMap": [
                    "bootstrap",
                    "rhel",
                    "warmebs"
                  ]
                },
                "\n",
                {
                  "Fn::FindInMap": [
                    "bootstrap",
                    "rhel",
                    "installpackages"
                  ]
                },
                "\n"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-rhel7"]]}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "EC2InstanceUbuntu14" : {
      "DependsOn": [
        "VPC",
        "PrivateSubnet2",
        "InternalAccessSecurityGroup",
        "NatSecurityGroup",
        "IamInstanceProfile"
      ],
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "InstanceTypeUbuntu14"
          ]
        },
        "IamInstanceProfile": {"Ref": "IamInstanceProfile"},
        "ImageId" : {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "AMIUbuntu14"
          ]
        },
        "NetworkInterfaces": [{
          "GroupSet": [
            {"Ref": "InternalAccessSecurityGroup"},
            {"Ref": "NatSecurityGroup"}
          ],
          "AssociatePublicIpAddress": "false",
          "DeviceIndex": "0",
          "DeleteOnTermination": "true",
          "SubnetId": {"Ref": "PrivateSubnet2"}
        }],
        "KeyName": {
          "Ref": "Ec2KeyPair"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                {
                  "Fn::FindInMap": [
                    "bootstrap",
                    "ubuntu",
                    "warmebs"
                  ]
                },
                "\n",
                {
                  "Fn::FindInMap": [
                    "bootstrap",
                    "ubuntu",
                    "installpackages"
                  ]
                },
                "\n"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-ubuntu14"]]}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    },
    "EC2InstanceWin2012" : {
      "DependsOn": [
        "VPC",
        "PrivateSubnet3",
        "InternalAccessSecurityGroup",
        "NatSecurityGroup",
        "IamInstanceProfile"
      ],
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "InstanceTypeWin2012"
          ]
        },
        "IamInstanceProfile": {"Ref": "IamInstanceProfile"},
        "ImageId" : {
          "Fn::FindInMap": [
            "RegionMap",
            {"Ref": "AWS::Region"},
            "AMIWin2012"
          ]
        },
        "NetworkInterfaces": [{
          "GroupSet": [
            {"Ref": "InternalAccessSecurityGroup"},
            {"Ref": "NatSecurityGroup"}
          ],
          "AssociatePublicIpAddress": "false",
          "DeviceIndex": "0",
          "DeleteOnTermination": "true",
          "SubnetId": {"Ref": "PrivateSubnet3"}
        }],
        "KeyName": {
          "Ref": "Ec2KeyPair"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-win2012"]]}
          },
          {
            "Key": "Owner",
            "Value": {"Ref": "Owner"}
          },
          {
            "Key": "Project",
            "Value": {"Ref": "Project"}
          }
        ]
      }
    }
  },
  "Outputs": {
    "Owner": {
      "Description": "The dude or team to bug about cleaning up",
      "Value": {"Ref": "Owner"}
    },
    "Project": {
      "Description": "The project name",
      "Value": {"Ref": "Project"}
    },
    "VPCId": {
      "Description": "VPC ID",
      "Value": {"Ref": "VPC"}
    },
    "VPCe": {
      "Description": "VPC Endpoint ID",
      "Value": {"Ref": "S3VpcEndpoint"}
    },
    "NatEIP": {
      "Description": "NAT Elastic IP Address",
      "Value": {"Ref": "NatEIP"}
    },
    "NatSecurityGroup": {
      "Description": "NAT Security Group ID for Instances to have Internet Access",
      "Value": {"Ref": "NatSecurityGroup"}
    },
    "BastionIP": {
      "Description": "IP address of the Bastion Instance EIP",
      "Value" : {"Ref": "BastionEIP"}
    },
    "BastionSecurityGroup": {
      "Description": "Bastion Host Access Security Group ID",
      "Value": {"Ref": "BastionSecurityGroup"}
    },
    "KeyPair": {
      "Description": "Key Pair used.",
      "Value": {"Ref": "Ec2KeyPair"}
    },
    "IamRole": {
      "Description": "EC2 IAM Profile Role.",
      "Value": {"Ref": "IamRole"}
    },
    "PublicSubnets": {
      "Description": "Public Subnets Created for VPC",
      "Value": {"Fn::Join": ["", [{"Ref": "PublicSubnet1"}, ", ", {"Ref": "PublicSubnet2"}, ", ", {"Ref": "PublicSubnet3"}]]}
    },
    "PrivateSubnets": {
      "Description": "Public Subnets Created for VPC",
      "Value": {"Fn::Join": ["", [{"Ref": "PrivateSubnet1"}, ", ", {"Ref": "PrivateSubnet2"}, ", ", {"Ref": "PrivateSubnet3"}]]}
    },
    "InternalAccessSecurityGroup": {
      "Description": "Instance to Instance Access within VPC",
      "Value": {"Ref": "InternalAccessSecurityGroup"}
    },
    "InternetToChefComplianceServerSecurityGroup": {
      "Description": "Internet to Chef Compliance Server Security Group",
      "Value": {"Ref": "InternetToChefComplianceServerSecurityGroup"}
    },
    "ChefComplianceDNS": {
      "Description": "Chef Compliance Server FQDN",
      "Value": {"Fn::GetAtt": ["EC2InstanceChefCompliance", "PublicDnsName"]}
    },
    "ChefComplianceVersion": {
      "Description": "Chef Compliance Server Version",
      "Value": {
        "Fn::FindInMap": [
          "RegionMap",
          {"Ref": "AWS::Region"},
          "ChefComplianceVersion"
        ]
      }
    },
    "DeleteAfter": {
      "Description": "It is ok to delete the stack after this date",
      "Value": {"Ref": "DeleteAfter"}
    }
  }
}